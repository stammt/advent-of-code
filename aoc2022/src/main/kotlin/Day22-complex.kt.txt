import java.io.File
import java.lang.IllegalArgumentException
import java.lang.IllegalStateException
import kotlin.math.abs
import kotlin.math.max
import kotlin.math.min

fun main(args: Array<String>) {
    val input = File("/Users/stammt/Documents/dev/advent-of-code/aoc2022/input/day22sample.txt").readLines()
    day22part2(input)
}

data class Point(val x: Int, val y: Int)
enum class Direction(val point: Point) {
    NORTH(Point(0, -1)),
    SOUTH(Point(0, 1)),
    EAST(Point(1, 0)),
    WEST(Point(0, 1))
}

fun makeTurn(dir: Point, turn: Char): Point {
    return if (turn == 'L') Point(dir.y, -dir.x) else Point(-dir.y, dir.x)
}

//data class EdgeTransition(val face: Int,
//                          val pointTransform: (Point) -> Point ,
//                          val facing: Direction)
//data class Face(
//    val position: Point,
//    val grid: Map<Point, Char>,
//    val northEdge: EdgeTransition,
//    val southEdge: EdgeTransition,
//    val eastEdge: EdgeTransition,
//    val westEdge: EdgeTransition) {
//
//    fun facePointToMapPoint(p: Point, faceSize: Int): Point {
//        return Point(position.x * faceSize + p.x, position.y * faceSize + p.y)
//    }
//}
//

fun day22part2(input: List<String>) {
    val grid = readGrid(input)
    val start = startPoint(input)!!
    val moves = input.lastOrNull { s -> s.trim().isNotEmpty() }!!

    val a = Point(11, 5)
    val b = wrapSample(a, Direction.WEST.point, grid)
    val c = Point(10, 11)
    val d = wrapSample(c, Direction.SOUTH.point, grid)

    printGrid(grid, mapOf<Point, Char>(a to 'A', b.first to 'B', c to 'C', d.first to 'D'))

//    var pos = start
//    var facing = Direction.EAST.point
//    for (i in moves.indices) {
//        if (!moves[i].isDigit()) {
//            facing = makeTurn(facing, moves[i])
//        } else {
//            var count = moves[i].digitToInt()
//            val nextPosFacing = step(pos, facing, grid)
//        }
//
//    }
}

fun printGrid(grid: Map<Point, Char>, overlay: Map<Point, Char>) {
    val maxX = grid.keys.maxBy { p -> p.x }.x
    val maxY = grid.keys.maxBy { p -> p.y }.y
    for (y in 0..maxY) {
        for (x in 0..maxX) {
            val p = Point(x, y)
            if (overlay.containsKey(p)) {
                print(overlay[p])
            } else if (grid.containsKey(p)) {
                print(grid[p])
            } else {
                print(' ')
            }
        }
        println()
    }
}

fun step(pos: Point, facing: Point, grid: Map<Point, Char>): Pair<Point, Point> {
    var nextPos = Point(pos.x + facing.x, pos.y + facing.y)
    var nextFacing = facing
    if (!grid.containsKey(nextPos) || grid[nextPos] == ' ') {
        val wrapped = wrapSample(pos, facing, grid)
        nextPos = wrapped.first
        nextFacing = wrapped.second
    }
    if (grid[nextPos]!! == '#') return pos to facing
    return nextPos to nextFacing
}

fun wrapSample(pos: Point, facing: Point, grid: Map<Point, Char>) : Pair<Point, Point> {
    val faceSize = 4
    if (facing == Direction.EAST.point) {
        if (pos.y < 4) {
            // face 1, east, wraps to face 6, west
            val nextPos = Point((faceSize * 4) - 1, faceSize - 1 - pos.y)
            return nextPos to Direction.WEST.point
        } else if (pos.y < 7) {
            // face 4, east, wraps to face 6, south
            val nextPos = Point((faceSize * 3) + (pos.y % faceSize), faceSize * 2)
            return nextPos to Direction.SOUTH.point
        }
        else {
            // face 6, east, wraps to face 5, east
            val nextPos = Point((faceSize * 2), pos.y)
            return nextPos to Direction.EAST.point
        }
    } else if (facing == Direction.WEST.point) {
        if (pos.y < 4) {
            // face 1, west, wraps to face 3, south
            val nextPos = Point(faceSize + pos.y, faceSize)
            return nextPos to Direction.SOUTH.point
        } else if (pos.y < 8) {
            // face 2, west, wraps to face 6, north
            val nextPos = Point((faceSize * 3) + (pos.y - faceSize), (faceSize * 4) - 1)
            return nextPos to Direction.NORTH.point
        } else {
            // face 5, west, wraps to face 3, north
            val nextPos = Point(faceSize + (pos.y - (faceSize * 2)), (faceSize * 2) - 1)
            return nextPos to Direction.NORTH.point
        }
    } else if (facing == Direction.NORTH.point) {
        if (pos.x < 4) {
            // face 2, wraps to face 1 south
            val nextPos = Point((faceSize * 2) + (faceSize - 1 - pos.x), 0)
            return nextPos to Direction.SOUTH.point
        } else if (pos.x < 8) {
            // face 3, wraps to face 1 east
            val nextPos = Point(faceSize * 2, pos.x - faceSize)
            return nextPos to Direction.WEST.point
        } else if (pos.x < 12) {
            // face 1, wraps to face 2 south
            val nextPos = Point(pos.x - (faceSize * 2), faceSize)
            return nextPos to Direction.SOUTH.point
        } else {
            // face 6, wraps to face 4 west
            val nextPos = Point((faceSize * 2) - 1, faceSize + (faceSize * 5) - pos.x)
            return nextPos to Direction.WEST.point
        }
    } else { // South
        if (pos.x < 4) {
            // face 2, wraps to face 5 north
            val nextPos = Point((faceSize * 2) + (faceSize - pos.x), (faceSize * 3) - 1)
            return nextPos to Direction.NORTH.point
        } else if (pos.x < 8) {
            // face 3, wraps to face 5 west
            val nextPos = Point(faceSize * 2, (faceSize * 2) + ((faceSize * 3) - pos.x))
            return nextPos to Direction.WEST.point
        } else if (pos.x < 12) {
            // face 5, wraps to face 2 north
            val nextPos = Point((faceSize * 3) - pos.x, (faceSize * 2) - 1)
            return nextPos to Direction.NORTH.point
        } else {
            // face 6, wraps to face 2 east
            val nextPos = Point(0, faceSize + ((faceSize * 5) - pos.x))
            return nextPos to Direction.EAST.point
        }
    }
}

fun readGrid(input: List<String>) : Map<Point, Char> {
    val grid = mutableMapOf<Point, Char>()
    for (y in input.indices) {
        if (input[y].trim().isEmpty()) break

        for (x in input[y].indices) {
            grid[Point(x, y)] = input[y][x]
        }
    }
    return grid
}

fun startPoint(input: List<String>) : Point? {
    for (y in 0 until input.size) {
        for (x in 0 until input[y].length) {
            if (input[y][x] == '.') {
                return Point(x, y)
            }
        }
    }
    return null
}

//fun mapPointToFacePoint(p: Point, faces: List<Face>, faceSize: Int) : Pair<Face, Point> {
//    println("$p is in face ${p.x / faceSize}, ${p.y / faceSize}")
//    val face = faces.first { f -> f.position == Point(p.x / faceSize, p.y / faceSize) }
//    return face to Point(p.x % faceSize, p.y % faceSize)
//}
//
//fun printMap(faces: List<Face>, faceSize: Int) {
//    val projected = mutableMapOf<Point, Char>()
//    for (face in faces) {
//        for (p in face.grid.keys) {
//            projected[face.facePointToMapPoint(p, faceSize)] = face.grid[p]!!
//        }
//    }
//    for (y in 0 until (faceSize * 3)) {
//        for (x in 0 until (faceSize * 4)) {
//            if (projected.containsKey(Point(x, y))) {
//                print(projected[(Point(x, y))]);
//            } else {
//                print(' ')
//            }
//        }
//        println()
//    }
//    println()
//}

//fun readSampleFaces(input: List<String>, faceSize: Int): List<Face> {
//    // There must be a way to figure this out programmatically...
//    val face1 = Face(Point(2, 0),
//        readGrid(input, (2*faceSize), (3*faceSize), 0, faceSize),
//        EdgeTransition(4, { p -> Point(p.x, faceSize-1) }, Direction.NORTH),
//        EdgeTransition(3, { p -> Point(p.x, 0)}, Direction.SOUTH),
//        EdgeTransition(5, { p -> Point(faceSize - 1 - p.y, 0)}, Direction.SOUTH),
//        EdgeTransition(2, { p -> Point(faceSize - 1, p.y )}, Direction.WEST))
//    val face2 = Face(Point(0, 1),
//        readGrid(input, 0, faceSize, faceSize, (2*faceSize)),
//        EdgeTransition(0, { p -> Point(faceSize - 1 - p.x, 0)}, Direction.SOUTH),
//        EdgeTransition(4, { p -> Point(faceSize - 1 - p.x, faceSize - 1)}, Direction.NORTH),
//        EdgeTransition(2, { p -> Point(0, p.y)}, Direction.EAST),
//        EdgeTransition(5, { p -> Point(faceSize - 1 - p.y, faceSize - 1)}, Direction.NORTH))
//    val face3 = Face(Point(1, 1),
//        readGrid(input, faceSize, faceSize * 2, faceSize, (2*faceSize)),
//        EdgeTransition(0, { p -> Point(0, p.x)}, Direction.WEST),
//        EdgeTransition(4, { p -> Point(0, faceSize - 1 - p.x) }, Direction.EAST),
//        EdgeTransition(3, { p -> Point(0, p.y) }, Direction.EAST),
//        EdgeTransition(1, { p -> Point(faceSize - 1, p.y) }, Direction.WEST)
//        )
//    val face4 = Face(Point(2, 1),
//        readGrid(input, faceSize * 2, faceSize * 3, faceSize, (2*faceSize)),
//        EdgeTransition(0, { p -> Point(p.x, faceSize - 1) }, Direction.NORTH),
//        EdgeTransition(4, { p -> Point(p.x, 0) }, Direction.SOUTH),
//        EdgeTransition(5, { p -> Point(faceSize - 1 - p.y, 0)}, Direction.SOUTH),
//        EdgeTransition(2, { p -> Point(faceSize - 1, p.y) }, Direction.WEST),
//        )
//    val face5 = Face(Point(2, 2),
//        readGrid(input, faceSize * 2, faceSize * 3, faceSize * 2,faceSize * 3),
//        EdgeTransition(3, { p -> Point(p.x, faceSize - 1) }, Direction.NORTH),
//        EdgeTransition(1, { p -> Point(faceSize - 1 - p.x, faceSize - 1) }, Direction.NORTH),
//        EdgeTransition(5, { p -> Point(0, p.y)}, Direction.EAST),
//        EdgeTransition(2, { p -> Point(faceSize - 1 - p.y, faceSize - 1) }, Direction.NORTH),
//    )
//    val face6 = Face(Point(3, 2),
//        readGrid(input, faceSize * 3, faceSize * 4, faceSize * 2,faceSize * 3),
//        EdgeTransition(3, { p -> Point(faceSize - 1, faceSize - 1 - p.x) }, Direction.WEST),
//        EdgeTransition(1, { p -> Point(0, faceSize - 1 - p.x) }, Direction.EAST),
//        EdgeTransition(4, { p -> Point(faceSize - 1, p.y) }, Direction.EAST),
//        EdgeTransition(0, { p -> Point(faceSize - 1, faceSize - 1 - p.y) }, Direction.EAST)
//        )
//
//    return listOf(face1, face2, face3, face4, face5, face6)
//}
//
//fun readGrid(input: List<String>, startX: Int, stopX: Int, startY: Int, stopY: Int): Map<Point, Char> {
//    val grid = mutableMapOf<Point, Char>()
//    for (x in startX until stopX)
//        for (y in startY until stopY) {
//            grid[Point(x-startX,y-startY)] = input[y][x]
//        }
//
////    println("Read grid at $startX, $startY:")
////    for (y in 0 until 4) {
////        for (x in 0 until 4) {
////            print(grid[Point(x, y)])
////        }
////        println()
////    }
//    return grid
//}

fun day22part1(input: List<String>) {
    val board = mutableMapOf<Pair<Int, Int>, Char>()
    val turns = mutableListOf<String>()
    var i = 0
    while (input[i].isNotBlank()) {
        for (x in input[i].indices) {
            if (input[i][x] == '.' || input[i][x] == '#') {
                board[x to i] = input[i][x]
            }
        }
        i++
    }
    i++
    var x = 0
    var turn = ""
    while (x < input[i].length) {
        if (input[i][x].isDigit()) {
            turn += input[i][x]
        } else {
            turns.add(turn)
            turn = ""
            turns.add("" + input[i][x])
        }
        x++
    }
    turns.add(turn)

    println("Board: $board")
    println("Turns: $turns")

    val minX = board.filter{ it.key.second == 0 && board[it.key] == '.'  }.map { it.key.first }.min()

    var facing = 0
    var pos = minX to 0
    println("Starting at $pos")
    for (turn in turns) {
        if (turn[0].isDigit()) {
            pos = move(turn.toInt(), pos, facing, board)
        } else {
            facing = turn(turn, facing)
        }
    }

    var result = (1000 * (pos.second + 1)) + (4 * (pos.first + 1)) + facing
    println("Result $result ($pos facing $facing)")
}

fun turn(dir: String, facing: Int) : Int {
    val next = if (dir == "R") facing + 1 else facing - 1
    return if (next > 3) 0 else if (next < 0) 3 else next
}

fun move(count: Int, pos: Pair<Int, Int>, facing: Int, board: Map<Pair<Int, Int>, Char>) : Pair<Int, Int> {
    var nextPos = pos
    for (i in 0 until count) {
        val maxX = board.filter{it.key.second == nextPos.second  }.map { it.key.first }.max()
        val minX = board.filter{it.key.second == nextPos.second }.map { it.key.first }.min()
        val maxY = board.filter{it.key.first == nextPos.first }.map { it.key.second }.max()
        val minY = board.filter{it.key.first == nextPos.first }.map { it.key.second }.min()
        println("For $nextPos $minX $minY and $maxX $maxY")
        var nextX = nextPos.first
        var nextY = nextPos.second
        if (facing == 0) {
            nextX++
            if (nextX > maxX) {
                nextX = minX
            }
        } else if (facing == 2) {
            nextX--
            if (nextX < minX) {
                nextX = maxX
            }
        } else if (facing == 1) {
            nextY++
            if (nextY > maxY) {
                nextY = minY
            }
        } else if (facing == 3) {
            nextY--
            if (nextY < minY) {
                nextY = maxY
            }
        } else {
            throw IllegalArgumentException("Unknown facing $facing")
        }

        if (board[nextX to nextY] == '#') {
            println("Would hit a wall")
            break
        } else {
            println("Stepping to $nextX,$nextY")
            nextPos = nextX to nextY
        }
    }
    println("Moved from $pos to $nextPos facing $facing")
    return nextPos
}


